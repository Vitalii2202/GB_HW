# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
# Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.

# не понял как решать, потому что написано вначале что функция которая принимает переменные или принимать переменные
# до функции, а в функции только вести подсчет переменных, поэтому:
# (первый вариант)
def foo_del():
    x = int(input('Введите число X: '))
    while True:
        y = int(input('Введите число Y: '))
        if y == 0:
            print('Неверно')
        else:
            break
    return x / y


result = foo_del()
print('Результат: ', result)

# (второй вариант)

x = int(input('Введите число X: '))
while True:
    y = int(input('Введите число Y: '))
    if y == 0:
        print('Неверно')
    else:
        break


def foo_del(x, y):
    return x / y


result = foo_del(x, y)
print('Результат: ', result)


# 2. Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя:
# имя, фамилия, год рождения, город проживания, email, телефон. Функция должна принимать параметры как
# именованные аргументы. Реализовать вывод данных о пользователе одной строкой.

name = input('Введите имя: ')
last_name = input('Введите фамилию: ')
birth_year = input('Введите свой год рождения: ')
city = input('Введите город: ')
email = input('Введите email: ')
phone = input('Введите телефон: ')


def human(*args):
    print('Данные о пользователе: ', name, last_name, birth_year, city, email, phone)

human(name, last_name, birth_year, city, email, phone)


# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента,
# и возвращает сумму наибольших двух аргументов.


x = int(input('Введидите число: '))
y = int(input('Введидите число: '))
z = int(input('Введидите число: '))

def my_func(x, y, z):
    my_list = []

    my_list.append(x)
    my_list.append(y)
    my_list.append(z)
    my_list.reverse()

    my_sum = int(my_list[0] + int(my_list[1]))

    return my_sum

print(my_func(x, y, z))


# 4. Программа принимает действительное положительное число x и целое отрицательное число y.
# Необходимо выполнить возведение числа x в степень y. Задание необходимо реализовать в виде
# функции my_func(x, y). При решении задания необходимо обойтись без встроенной функции возведения числа в степень.

# Первый
x = int(input('Введите число X: '))
y = int(input('Введите число Y: '))

def my_func(x, y):
    return x ** y

stepen = my_func(x, y)
print(stepen)


# Второй
x = int(input('Введите число X: '))
y = int(input('Введите число Y: '))

def my_func(x, y):
    i = x
    while y != -1:
        x = x * i
        y += 1

    return 1 / x

stepen = my_func(x, y)
print(stepen)


# 5. Программа запрашивает у пользователя строку чисел, разделенных пробелом.
# При нажатии Enter должна выводиться сумма чисел. Пользователь может продолжить ввод чисел,
# разделенных пробелом и снова нажать Enter. Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме.
# Но если вместо числа вводится специальный символ, выполнение программы завершается.
# Если специальный символ введен после нескольких чисел, то вначале нужно добавить сумму этих чисел к
# полученной ранее сумме и после этого завершить программу.

vuvod = []

while True:
    vvod = list(input('Введите числа: ').split())

    try:
        for i in vvod:
            vuvod.append(i)
        vvod.clear()
        x = 0
        for i in vuvod:
            x = x + int(i)
        print(x)
        vuvod.clear()
        vuvod.append(x)

    except ValueError:
        vuvod.pop()
        x = 0
        for i in vuvod:
            x = x + int(i)
        print(x)
        break


#6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же, но с
# прописной первой буквой. Например, print(int_func(‘text’)) -> Text.


def int_func(text):
    print(text.capitalize())
    return

int_func('text')
