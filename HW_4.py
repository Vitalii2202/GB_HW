# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv

file, chasu_param, stavka_param, premiya_param = argv

def raschet(chasu, stavka, premiya):
    zp = (int(chasu) * int(stavka)) + int(premiya)
    return zp

print('Файл: ', file)
print('Введите значение (кол-во часов): ', chasu_param)
print('Введите значение (ставка): ', stavka_param)
print('Введите значение (премия): ', premiya_param)
print('Ваша ЗП: ', raschet(chasu_param, stavka_param, premiya_param))



# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

import random

my_list = []
my_list_vuvod = []
x = 15

while x!=0:
    a = random.randint(1, 1000)
    my_list.append(a)
    x -=1
print('Пример исходного списка: ', my_list)

i = 1
while len(my_list) > 2:
    if my_list[i] > my_list[i - 1]:
        my_list_vuvod.append(my_list[i])
        my_list.remove(my_list[i-1])

    else:
        my_list.remove(my_list[i-1])

print('Результат: ', my_list_vuvod)

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

a = [i for i in range(20, 241) if i % 20 == 0 or i % 21 == 0]
print(a)


# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их следования
#  исходном списке. Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]


# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления
# произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce

vuv = [i for i in range(100, 1001) if i%2 == 0]

def proizv(el_prev, el):
    return el_prev * el

a = reduce(proizv, vuv)
print(a)


# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не
# должен быть бесконечным. Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.